from pystyle import Add, Center, Anime, Colors, Colorate, Write, System
import requests, json, os, sys
from sys import platform
from time import sleep
from datetime import datetime

total = 0
may = 'mb' if platform[0:3] == 'lin' else 'pc'
CONFIG_FILE = "config.txt"


xnhac = "\033[1;36m"

do = "\033[1;31m"

luc = "\033[1;32m"

vang = "\033[1;33m"

xduong = "\033[1;34m"

hong = "\033[1;35m"

trang = "\033[1;39m"

whiteb = "\033[1;39m"

red = "\033[0;31m"

redb = "\033[1;31m"


def banner():

    banner = f"""


"""

    for X in banner:

        sys.stdout.write(X)

        sys.stdout.flush()

        sleep(0.000001)

def _now():
    return datetime.now().strftime('%H:%M:%S')

LEVEL_MAP = {
    'SYSTEM': ('SYSTEM', Colors.cyan_to_blue),
    'LOGIN' : ('LOGIN' , Colors.green_to_white),
    'TASK'  : ('TASK'  , Colors.yellow_to_red),
    'FOLLOW': ('FOLLOW', Colors.green_to_white),
    'TIM'   : ('TIM'   , Colors.yellow_to_red),
    'ERROR' : ('ERROR' , Colors.red_to_yellow),
    'DELAY' : ('DELAY' , Colors.cyan_to_blue),
    'COIN'  : ('COIN'  , Colors.green_to_white),
}

def log(level, group, message, icon=""):
    tag, color = LEVEL_MAP.get(level, ('LOG', Colors.cyan_to_blue))
    t = _now()
    text = f"[{t}] [{group}] {icon} {message}"
    try:
        colored = Colorate.Horizontal(color, text)
        print(colored)
    except Exception:
        print(text)

def newbie_delay(dl):
    try:
        for i in range(dl, 0, -1):
            log('DELAY', 'SYSTEM', f"‚è≥ Ch·ªù {i}s...", icon="‚è≥")
            sleep(1)
    except Exception:
        sleep(dl)
        log('DELAY', 'SYSTEM', f"‚è≥ Ch·ªù {dl}s... (fallback)", icon="‚è≥")

def newbie_open(link, may):
    try:
        if may == 'mb':
            os.system(f'xdg-open "{link}"')
        else:
            os.system(f'cmd /c start "" "{link}"')
        log('SYSTEM', 'OPEN', f"üîó M·ªü li√™n k·∫øt: {link}")
    except Exception as e:
        log('ERROR', 'OPEN', f"‚ùå Kh√¥ng th·ªÉ m·ªü li√™n k·∫øt: {e}")

class TraoDoiSub_Api:
    def __init__(self, token):
        self.token = token

    def get_profile(self):
        try:
            res = requests.get(f'https://traodoisub.com/api/?fields=profile&access_token={self.token}', timeout=15)
            data = res.json()
            return data.get('data', False)
        except Exception as e:
            log('ERROR', 'LOGIN', f"‚ùå L·ªói l·∫•y profile: {e}")
            return False

    def configure_user(self, user):
        try:
            res = requests.get(f'https://traodoisub.com/api/?fields=tiktok_run&id={user}&access_token={self.token}', timeout=15)
            data = res.json()
            return data.get('data', False)
        except Exception as e:
            log('ERROR', 'CONFIG', f"‚ùå L·ªói c·∫•u h√¨nh user: {e}")
            return False

    def fetch_job(self, type_):
        try:
            res = requests.get(f'https://traodoisub.com/api/?fields={type_}&access_token={self.token}', timeout=15)
            return res
        except Exception as e:
            log('ERROR', 'TASK', f"‚ùå L·ªói fetch nhi·ªám v·ª• {type_}: {e}")
            return False

    def check_cache(self, id_, type_):
        try:
            res = requests.get(f'https://traodoisub.com/api/coin/?type={type_}&id={id_}&access_token={self.token}', timeout=15)
            data = res.json()
            return 'cache' in data
        except Exception:
            return False

    def collect_coin(self, id_, type_):
        global total
        try:
            res = requests.get(f'https://traodoisub.com/api/coin/?type={type_}&id={id_}&access_token={self.token}', timeout=15)
            data = res.json().get('data', {})
            xu = data.get('xu', 0)
            msg = data.get('msg', '')
            job = data.get('job_success', None)
            xuthem = data.get('xu_them', 0)
            total += xuthem
            log('COIN', 'COIN', f"üí∞ Nh·∫≠n: +{xuthem} xu | {msg} | T·ªïng: {total} xu")
            if job == 0:
                return 0
            return True
        except Exception as e:
            txt = getattr(e, 'message', str(e))
            log('ERROR', 'COIN', f"‚ùå Nh·∫≠n xu th·∫•t b·∫°i: {txt}")
            return False

def show_banner():
    banner_lines = [
      " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó",
      " ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë",
      "    ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë",
      "    ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë",
      "    ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë",
      "    ‚ïö‚ïê‚ïù  ‚ñà‚ñà  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù",
        "   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
        "   ‚ïë Tool By: Shop T.Khanh            Phi√™n B·∫£n: 1.0 ‚ïë",    
        "   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù",

        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
        "‚ïë[‚ù£] Zalo : ‚òû http://zalo.me/0854533557‚ôî ‚òú              ‚ïë",
        "‚ïë[‚ù£] Tiktok : ‚òû @tk_a_hplus\033[1;31m‚ôî ‚òú                    ‚ïë",
        "‚ïë[‚ù£] Facebook : ‚òû https://www.facebook.com/tkhanh223‚ôî ‚òú ‚ïë",
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    ]
    try:
        text = "\n".join(banner_lines)
        Anime.Fade(Add.Add(banner_lines), color=Colors.blue_to_cyan, interval=0.03, enter=True)
    except Exception:
        for line in banner_lines:
            log('SYSTEM', 'BANNER', line)

def newbietool_main():
    dem = 0
    show_banner()

    token = None
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                token = f.read().strip()
                log('SYSTEM', 'LOGIN', "üîë ƒê√£ t·∫£i access_token t·ª´ file.")
        except Exception:
            token = None

    while True:
        if not token:
            token = input("Nh·∫≠p Access_Token TDS: ").strip()
            with open(CONFIG_FILE, 'w') as f:
                f.write(token)
            log('SYSTEM', 'LOGIN', "üîë ƒê√£ l∆∞u access_token v√†o file.")
        tds = TraoDoiSub_Api(token)
        profile = tds.get_profile()
        if profile:
            try:
                xu = profile.get('xu', 0)
                xudie = profile.get('xudie', 0)
                user = profile.get('user', 'Unknown')
                log('LOGIN', 'LOGIN', f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng | T√†i kho·∫£n: {user} | Xu: {xu} | Xu b·ªã ph·∫°t: {xudie}")
                break
            except Exception:
                log('ERROR', 'LOGIN', "‚ùå L·ªói khi ƒë·ªçc profile, token c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá.")
                token = None
                if os.path.exists(CONFIG_FILE):
                    os.remove(CONFIG_FILE)
                continue
        else:
            log('ERROR', 'LOGIN', "‚ùå Access Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            token = None
            if os.path.exists(CONFIG_FILE):
                os.remove(CONFIG_FILE)
            continue


    while True:
        log('SYSTEM', 'MENU', "üî∏ Ch·ªçn nhi·ªám v·ª•: [1] TIM | [2] FOLLOW | [3] FOLLOW NOW")
        nhiem_vu = input("Nh·∫≠p S·ªë ƒê·ªÉ Ch·∫°y Nhi·ªám V·ª•: ").strip()
        try:
            dl = int(input("Nh·∫≠p Delay (gi√¢y): ").strip())
        except:
            log('ERROR', 'INPUT', "‚ùå Delay kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh 3s.")
            dl = 3


        while True:
            try:
                nv_nhan = int(input("Sau bao nhi√™u nhi·ªám v·ª• th√¨ nh·∫≠n xu (>=8, <=15): ").strip())
            except:
                log('ERROR', 'INPUT', "‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i.")
                continue
            if nv_nhan < 8:
                log('ERROR', 'INPUT', "‚ö†Ô∏è Ph·∫£i >= 8 nhi·ªám v·ª• ƒë·ªÉ tr√°nh l·ªói.")
                continue
            if nv_nhan > 15:
                log('ERROR', 'INPUT', "‚ö†Ô∏è Gi·ªØ < 15 nhi·ªám v·ª• ƒë·ªÉ tr√°nh l·ªói.")
                continue
            break

        user_cau_hinh = input("Nh·∫≠p User Name TikTok c·∫ßn c·∫•u h√¨nh: ").strip()
        cau_hinh = tds.configure_user(user_cau_hinh)
        if not cau_hinh:
            log('ERROR', 'CONFIG', f"‚ùå C·∫•u h√¨nh th·∫•t b·∫°i cho user: {user_cau_hinh}")
            continue
        user = cau_hinh.get('uniqueID', user_cau_hinh)
        id_acc = cau_hinh.get('id', '0')
        os.system("cls" if os.name == "nt" else "clear")
        log('SYSTEM', 'CONFIG', f"üîß C·∫•u h√¨nh th√†nh c√¥ng | ID: {id_acc} | User: {user}")

        dem = 0

        while True:
            if '1' in nhiem_vu:
                log('TASK', 'TIM', "üîç ƒêang l·∫•y nhi·ªám v·ª• TIM (like)...")
                listlike = tds.fetch_job('tiktok_like')
                if not listlike:
                    log('ERROR', 'TIM', "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c nhi·ªám v·ª• Like.")
                    sleep(2); continue
                if 'error' in listlike.text:
                    err = listlike.json().get('error', '')
                    if err == 'Thao t√°c qu√° nhanh vui l√≤ng ch·∫≠m l·∫°i':
                        coun = listlike.json().get('countdown', 1)
                        log('SYSTEM', 'TIM', f"‚è≥ COUNTDOWN: {coun}")
                        sleep(2); continue
                    elif err == 'Vui l√≤ng ·∫•n NH·∫¨N T·∫§T C·∫¢ r·ªìi sau ƒë√≥ ti·∫øp t·ª•c l√†m nhi·ªám v·ª• ƒë·ªÉ tr√°nh l·ªói!':
                        tds.collect_coin('TIKTOK_LIKE_API', 'TIKTOK_LIKE')
                        sleep(2); continue
                    else:
                        log('ERROR', 'TIM', f"‚ùå {err}")
                        sleep(2); continue
                try:
                    listlike = listlike.json().get('data', [])
                except Exception:
                    log('ERROR', 'TIM', "‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu nhi·ªám v·ª• TIM.")
                    sleep(2); continue

                if len(listlike) == 0:
                    log('SYSTEM', 'TIM', "‚ö†Ô∏è H·∫øt nhi·ªám v·ª• Like.")
                    sleep(2); continue

                log('SYSTEM', 'TIM', f"üîé T√¨m th·∫•y {len(listlike)} nhi·ªám v·ª• Like.")
                for i in listlike:
                    id_ = i.get('id')
                    link = i.get('link')
                    newbie_open(link, may)
                    cache = tds.check_cache(id_, 'TIKTOK_LIKE_CACHE')
                    if not cache:
                        log('SYSTEM', 'TIM', f"‚úñÔ∏è Ch∆∞a cache (b·ªè qua): {id_}")
                        sleep(1); continue
                    dem += 1
                    log('TIM', 'TIM', f"ƒêang l√†m nhi·ªám v·ª• | id: {id_} | [{dem}]")
                    newbie_delay(dl)
                    if dem % nv_nhan == 0:
                        nhan = tds.collect_coin('TIKTOK_LIKE_API', 'TIKTOK_LIKE')
                        if nhan == 0:
                            log('ERROR', 'COIN', "‚ùå Nh·∫≠n xu th·∫•t b·∫°i. Ch·ªçn h√†nh ƒë·ªông:")
                            log('SYSTEM', 'CHOICE', "[1] Thay nhi·ªám v·ª• | [2] Thay Acc TikTok | [Enter] Ti·∫øp t·ª•c")
                            chon = input("L·ª±a ch·ªçn: ").strip()
                            if chon == '1':
                                nhiem_vu = input("Nh·∫≠p S·ªë ƒê·ªÉ Ch·∫°y Nhi·ªám V·ª•: ").strip()
                                break
                            elif chon == '2':
                                token = None
                                if os.path.exists(CONFIG_FILE):
                                    os.remove(CONFIG_FILE)
                                return

            if '2' in nhiem_vu:
                log('TASK', 'FOLLOW', "üîç ƒêang l·∫•y nhi·ªám v·ª• FOLLOW...")
                listfollow = tds.fetch_job('tiktok_follow')
                if not listfollow:
                    log('ERROR', 'FOLLOW', "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c nhi·ªám v·ª• Follow.")
                    sleep(2); continue
                if 'error' in listfollow.text:
                    err = listfollow.json().get('error', '')
                    if err == 'Thao t√°c qu√° nhanh vui l√≤ng ch·∫≠m l·∫°i':
                        coun = listfollow.json().get('countdown', 1)
                        log('SYSTEM', 'FOLLOW', f"‚è≥ COUNTDOWN: {coun}")
                        sleep(2); continue
                    elif err == 'Vui l√≤ng ·∫•n NH·∫¨N T·∫§T C·∫¢ r·ªìi sau ƒë√≥ ti·∫øp t·ª•c l√†m nhi·ªám v·ª• ƒë·ªÉ tr√°nh l·ªói!':
                        tds.collect_coin('TIKTOK_FOLLOW_API', 'TIKTOK_FOLLOW')
                        sleep(2); continue
                    else:
                        log('ERROR', 'FOLLOW', f"‚ùå {err}")
                        sleep(2); continue
                try:
                    listfollow = listfollow.json().get('data', [])
                except Exception:
                    log('ERROR', 'FOLLOW', "‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu nhi·ªám v·ª• FOLLOW.")
                    sleep(2); continue

                if len(listfollow) == 0:
                    log('SYSTEM', 'FOLLOW', "‚ö†Ô∏è H·∫øt nhi·ªám v·ª• Follow.")
                    sleep(2); continue

                log('SYSTEM', 'FOLLOW', f"üîé T√¨m th·∫•y {len(listfollow)} nhi·ªám v·ª• Follow.")
                for i in listfollow:
                    id_ = i.get('id')
                    link = i.get('link')
                    newbie_open(link, may)
                    cache = tds.check_cache(id_, 'TIKTOK_FOLLOW_CACHE')
                    if not cache:
                        log('SYSTEM', 'FOLLOW', f"‚úñÔ∏è Ch∆∞a cache (b·ªè qua): {id_}")
                        sleep(1); continue
                    dem += 1
                    log('FOLLOW', 'FOLLOW', f"ƒêang l√†m nhi·ªám v·ª• | id: {id_} | [{dem}]")
                    newbie_delay(dl)
                    if dem % nv_nhan == 0:
                        nhan = tds.collect_coin('TIKTOK_FOLLOW_API', 'TIKTOK_FOLLOW')
                        if nhan == 0:
                            log('ERROR', 'COIN', "‚ùå Nh·∫≠n xu th·∫•t b·∫°i.")
                            chon = input("L·ª±a ch·ªçn (1: ƒë·ªïi nhi·ªám v·ª•, 2: ƒë·ªïi acc): ").strip()
                            if chon == '1':
                                nhiem_vu = input("Nh·∫≠p S·ªë ƒê·ªÉ Ch·∫°y Nhi·ªám V·ª•: ").strip()
                                break
                            elif chon == '2':
                                token = None
                                if os.path.exists(CONFIG_FILE):
                                    os.remove(CONFIG_FILE)
                                return

            if '3' in nhiem_vu:
                log('TASK', 'FOLLOW_NOW', "üîç ƒêang l·∫•y nhi·ªám v·ª• FOLLOW NOW...")
                listfollow = tds.fetch_job('tiktok_follow')
                if not listfollow:
                    log('ERROR', 'FOLLOW_NOW', "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c nhi·ªám v·ª• Follow Now.")
                    sleep(2); continue
                if 'error' in listfollow.text:
                    err = listfollow.json().get('error', '')
                    if err == 'Thao t√°c qu√° nhanh vui l√≤ng ch·∫≠m l·∫°i':
                        coun = listfollow.json().get('countdown', 1)
                        log('SYSTEM', 'FOLLOW_NOW', f"‚è≥ COUNTDOWN: {coun}")
                        sleep(2); continue
                    elif err == 'Vui l√≤ng ·∫•n NH·∫¨N T·∫§T C·∫¢ r·ªìi sau ƒë√≥ ti·∫øp t·ª•c l√†m nhi·ªám v·ª• ƒë·ªÉ tr√°nh l·ªói!':
                        tds.collect_coin('TIKTOK_FOLLOW_API', 'TIKTOK_FOLLOW')
                        sleep(2); continue
                    else:
                        log('ERROR', 'FOLLOW_NOW', f"‚ùå {err}")
                        sleep(2); continue
                try:
                    listfollow = listfollow.json().get('data', [])
                except Exception:
                    log('ERROR', 'FOLLOW_NOW', "‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu nhi·ªám v·ª• FOLLOW NOW.")
                    sleep(2); continue

                if len(listfollow) == 0:
                    log('SYSTEM', 'FOLLOW_NOW', "‚ö†Ô∏è H·∫øt nhi·ªám v·ª• Follow Now.")
                    sleep(2); continue

                log('SYSTEM', 'FOLLOW_NOW', f"üîé T√¨m th·∫•y {len(listfollow)} nhi·ªám v·ª• Follow Now.")
                for i in listfollow:
                    id_ = i.get('id')
                    uid = str(id_).split('_')[0]
                    que = i.get('uniqueID', '')
                    if may == 'mb':
                        newbie_open(f'tiktoknow://user/profile?user_id={uid}', may)
                    else:
                        newbie_open(f'https://now.tiktok.com/@{que}', may)
                    cache = tds.check_cache(id_, 'TIKTOK_FOLLOW_CACHE')
                    if not cache:
                        log('SYSTEM', 'FOLLOW_NOW', f"‚úñÔ∏è Ch∆∞a cache (b·ªè qua): {id_}")
                        sleep(1); continue
                    dem += 1
                    log('FOLLOW', 'FOLLOW_NOW', f"ƒêang l√†m nhi·ªám v·ª• NOW | id: {id_} | [{dem}]")
                    newbie_delay(dl)
                    if dem % nv_nhan == 0:
                        nhan = tds.collect_coin('TIKTOK_FOLLOW_API', 'TIKTOK_FOLLOW')
                        if nhan == 0:
                            log('ERROR', 'COIN', "‚ùå Nh·∫≠n xu th·∫•t b·∫°i. Ch·ªçn h√†nh ƒë·ªông:")
                            chon = input("L·ª±a ch·ªçn: ").strip()
                            if chon == '1':
                                nhiem_vu = input("Nh·∫≠p S·ªë ƒê·ªÉ Ch·∫°y Nhi·ªám V·ª•: ").strip()
                                break
                            elif chon == '2':
                                token = None
                                if os.path.exists(CONFIG_FILE):
                                    os.remove(CONFIG_FILE)
                                return

if __name__ == "__main__":
    try:
        newbietool_main()
    except KeyboardInterrupt:
        log('SYSTEM', 'EXIT', "üîö Tho√°t ch∆∞∆°ng tr√¨nh b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        log('ERROR', 'CRASH', f"‚ùå ·ª®ng d·ª•ng g·∫∑p l·ªói: {e}")
